# -*- coding: utf-8 -*-
"""Gibberish Generator Colab Notebook

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14rW19dO5kpIuCiBdqPylDcgBTL7pXXiI
"""

#@title 1. Dependencies
# Install espeak backend and ffmpeg (for potential future use/formats)
!sudo apt-get update > /dev/null
!sudo apt-get install -y espeak ffmpeg libespeak1
!pip install openai
print("--- Installation commands finished ---")

# Verify espeak installation
print("\n--- Checking espeak installation ---")
!espeak --version || echo "espeak command not found after install attempt"
print("-" * 30)

print("Dependencies installation attempted.")
print("If you still encounter errors below, try Runtime -> Restart runtime, then re-run Cell 2 and Cell 3.")

# Install libraries needed for audio processing (breathiness simulation)
!pip install numpy scipy > /dev/null
print("Numpy and Scipy installed for audio processing.")

# %%
#@title 2. Define

import subprocess # Kept in case it's used elsewhere, but not for TTS now
import os
import random
import string
# numpy, scipy, wavfile not strictly needed for basic OpenAI playback,
# but kept in case of future audio processing needs.
import numpy as np
from scipy.io import wavfile
import IPython.display as ipd
import math # Kept in case of future use

import openai # Import the openai library

# --- Load OpenAI API Key from Colab Secrets ---
from google.colab import userdata

# Set your OpenAI API key from the secret named 'OPENAI_API_KEY_2'
os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI_API_KEY_2')

openai.api_key = os.getenv("OPENAI_API_KEY")

# Verify the key is set (optional)
if openai.api_key:
    print("OpenAI API key loaded successfully.")
else:
    print("❌ OpenAI API key not found. Please set a secret named 'OPENAI_API_KEY_2' in Colab secrets.")


# Function to generate a simple jibberish phrase (same as before)
# This function is no longer strictly needed if we pass custom text,
# but kept in case it's used elsewhere or for fallback.
def generate_jibberish(num_syllables=10):
    vowels = "aeiou"
    consonants = "".join(set(string.ascii_lowercase) - set(vowels))
    jibberish = []
    for _ in range(num_syllables):
        syllable = random.choice(consonants) + random.choice(vowels)
        if random.random() > 0.7: # Occasionally add another consonant
             syllable += random.choice(consonants)
        jibberish.append(syllable)
    # Make sure the text doesn't contain problematic characters for command line
    safe_jibberish = "".join(jibberish).replace('"', '').replace("'", "")
    return safe_jibberish # Return as a single string

# --- Main Synthesis Function using OpenAI TTS ---
# MODIFIED: Added 'instructions' parameter
def generate_speech_audio(
    text,               # REQUIRED: The text to synthesize
    voice="alloy",      # OpenAI voice (e.g., 'alloy', 'echo', 'fable', 'onyx', 'nova', 'shimmer')
    model="tts-1",      # OpenAI TTS model (e.g., 'tts-1', 'tts-1-hd', 'gpt-4o-mini-tts')
    instructions=None   # OPTIONAL: Instructions for gpt-4o-mini-tts model
    ):

    if not openai.api_key:
        print("❌ OpenAI API key is not set. Cannot generate audio.")
        return None

    text_to_speak = text
    print(f"Synthesizing text: {text_to_speak[:50]}...") # Print first 50 chars of text

    # --- Use OpenAI TTS API ---
    output_filename = 'jibberish_output.wav' # Keep filename consistent for playback

    try:
        # Prepare API arguments
        api_args = {
            "model": model,
            "voice": voice,
            "input": text_to_speak,
            "response_format": "wav" # Specify WAV format
        }

        # Add instructions ONLY if the model supports it and instructions are provided
        if model == "gpt-4o-mini-tts" and instructions is not None:
             api_args["instructions"] = instructions
             print(f"Using instructions for {model}: {instructions}")
        elif model == "gpt-4o-mini-tts" and instructions is None:
             print(f"Note: Using {model} but no instructions were provided.")
        elif model != "gpt-4o-mini-tts" and instructions is not None:
             print(f"Warning: Instructions provided but ignored for model '{model}' as it does not support them.")


        response = openai.audio.speech.create(**api_args) # Use **api_args to pass parameters dynamically


        # Save the audio response to a file
        # Ensure directory exists if not saving to current dir
        # (Not strictly necessary for '.' but good practice)
        output_dir = os.path.dirname(output_filename)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)

        response.stream_to_file(output_filename)
        print(f"Audio generated and saved to {output_filename}")

        if not os.path.exists(output_filename):
             print("❌ Error: Output file was not created by OpenAI TTS.")
             return None

    except openai.AuthenticationError:
        print("❌ OpenAI Authentication Error: Check your API key ('OPENAI_API_KEY_2').")
        return None
    except openai.APIError as e:
        print(f"❌ OpenAI API Error: {e}")
        # Print response body if available for detailed error messages
        if hasattr(e, 'response') and hasattr(e.response, 'text'):
            print(f"API Error Details: {e.response.text}")
        return None
    except Exception as e:
        print(f"❌ An unexpected error occurred during OpenAI API call: {e}")
        return None

    # --- Play the generated audio ---
    try:
        if os.path.exists(output_filename):
            return ipd.Audio(output_filename)
        else:
            print("❌ Cannot play audio, output file not found.")
            return None

    except Exception as e:
        print(f"⚠️ Error during audio playback: {e}")
        return None

print("Define cell finished.")

#@title 3. Generate Speech { run: "auto" }

# --- OpenAI Parameters ---
openai_voice = "ballad" #@param ["alloy", "ash", "ballad", "coral", "echo", "fable", "nova", "onyx", "sage", "shimmer"]
openai_model = "gpt-4o-mini-tts" #@param ["tts-1", "tts-1-hd", "gpt-4o-mini-tts"]

# --- Text Input and Presets ---
text_input_option = "Preset Text" #@param ["Preset Text", "Custom Text"]

# Define preset texts
preset_texts = {
    "Train Station Announcement": "Attention all passengers. The train to Platform 5 is now boarding. Please have your tickets ready.",
    "Hospital Announcement": "Dr. Smith to examination room three. Dr. Smith to examination room three.",
    "Car Navigation Announcement": "In two hundred feet, turn left. Then, at the next intersection, turn right."
}

preset_text_choice = "Hospital Announcement" #@param ["Train Station Announcement", "Hospital Announcement", "Car Navigation Announcement"]
custom_text = "This is some custom text to test the voice styles." #@param {type:"string"}

# Determine the base text to speak
if text_input_option == "Preset Text":
    base_text = preset_texts[preset_text_choice]
    print(f"Using Preset Text: {preset_text_choice}")
else:
    base_text = custom_text
    print("Using Custom Text:")
    print(base_text)

# --- Style Sliders ---
#@markdown Adjust these sliders to influence the voice style.

#@markdown Gender: masculine - feminine
masculine_feminine = -1 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Assertiveness: timid - bold
assertiveness = 0 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Buoyancy: deflated - buoyant
buoyancy = 0 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Confidence: shy - confident
confidence = 0 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Enthusiasm: calm - enthusiastic
enthusiasm = -2 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Nasality: clear - nasal
nasality = 0 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Relaxedness: tense - relaxed
relaxedness = 0 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Smoothness: staccato - legato
smoothness = 0 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Tepidity: tepid - vigorous
tepidity = 0 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Tightness: tight - breathy
tightness = 0 #@param {type:"slider", min:-2, max:2, step:1}
#@markdown Speed: slow - fast
speed = 0 #@param {type:"slider", min:-2, max:2, step:1}


# --- Function to generate instructions or modify text based on sliders ---
def create_style_instructions(
    masculine_feminine, assertiveness, buoyancy, confidence,
    enthusiasm, nasality, relaxedness, smoothness, tepidity,
    tightness, speed
    ):
    """
    Generates an instructions string for models like gpt-4o-mini-tts
    based on slider values. Returns None if no significant style is applied.
    """
    instructions_parts = []

    # Mapping slider values (-2 to 2) to descriptive text
    # -2: Extreme negative, -1: Mild negative, 0: Neutral, 1: Mild positive, 2: Extreme positive

    # Masculine/Feminine
    if masculine_feminine == -2: instructions_parts.append("Speak with a very masculine voice.")
    elif masculine_feminine == -1: instructions_parts.append("Speak with a slightly masculine voice.")
    elif masculine_feminine == 1: instructions_parts.append("Speak with a slightly feminine voice.")
    elif masculine_feminine == 2: instructions_parts.append("Speak with a very feminine voice.")

    # Assertiveness
    if assertiveness == -2: instructions_parts.append("Sound very timid.")
    elif assertiveness == -1: instructions_parts.append("Sound slightly timid.")
    elif assertiveness == 1: instructions_parts.append("Sound slightly bold.")
    elif assertiveness == 2: instructions_parts.append("Sound very bold.")

    # Buoyancy
    if buoyancy == -2: instructions_parts.append("Sound very deflated.")
    elif buoyancy == -1: instructions_parts.append("Sound slightly deflated.")
    elif buoyancy == 1: instructions_parts.append("Sound slightly buoyant.")
    elif buoyancy == 2: instructions_parts.append("Sound very buoyant.")

    # Confidence
    if confidence == -2: instructions_parts.append("Sound very shy.")
    elif confidence == -1: instructions_parts.append("Sound slightly shy.")
    elif confidence == 1: instructions_parts.append("Sound slightly confident.")
    elif confidence == 2: instructions_parts.append("Sound very confident.")

    # Enthusiasm
    if enthusiasm == -2: instructions_parts.append("Sound very calm.")
    elif enthusiasm == -1: instructions_parts.append("Sound slightly calm.")
    elif enthusiasm == 1: instructions_parts.append("Sound slightly enthusiastic.")
    elif enthusiasm == 2: instructions_parts.append("Sound very enthusiastic.")

    # Nasality
    if nasality == -2: instructions_parts.append("Sound very clear (not nasal).")
    elif nasality == -1: instructions_parts.append("Sound slightly clear (less nasal).")
    elif nasality == 1: instructions_parts.append("Sound slightly nasal.")
    elif nasality == 2: instructions_parts.append("Sound very nasal.")

    # Relaxedness
    if relaxedness == -2: instructions_parts.append("Sound very tense.")
    elif relaxedness == -1: instructions_parts.append("Sound slightly tense.")
    elif relaxedness == 1: instructions_parts.append("Sound slightly relaxed.")
    elif relaxedness == 2: instructions_parts.append("Sound very relaxed.")

    # Smoothness (Mapping Staccato (-ve) to Legato (+ve))
    if smoothness == -2: instructions_parts.append("Speak very staccato, with clear separation between words/syllables.")
    elif smoothness == -1: instructions_parts.append("Speak staccato, with slight pauses between words.")
    elif smoothness == 1: instructions_parts.append("Speak legato, connecting words smoothly.")
    elif smoothness == 2: instructions_parts.append("Speak very legato, smoothly connecting words.")

    # Tepidity (Liveliness)
    if tepidity == -2: instructions_parts.append("Sound very tepid (unlively).")
    elif tepidity == -1: instructions_parts.append("Sound slightly tepid (less lively).")
    elif tepidity == 1: instructions_parts.append("Sound slightly vigorous (lively).")
    elif tepidity == 2: instructions_parts.append("Sound very vigorous (lively).")

    # Tightness (Mapping Tight (-ve) to Breathy (+ve))
    if tightness == -2: instructions_parts.append("Sound very tight (not breathy).")
    elif tightness == -1: instructions_parts.append("Sound slightly tight (less breathy).")
    elif tightness == 1: instructions_parts.append("Sound slightly breathy.")
    elif tightness == 2: instructions_parts.append("Sound very breathy (like whispering).")

    # Speed (Mapping Slow (-ve) to Fast (+ve))
    if speed == -2: instructions_parts.append("Speak very slowly.")
    elif speed == -1: instructions_parts.append("Speak slowly.")
    elif speed == 1: instructions_parts.append("Speak quickly.")
    elif speed == 2: instructions_parts.append("Speak very quickly.")

    if instructions_parts:
        return "Instructions: " + ", ".join(instructions_parts) + "."
    else:
        return None # Return None if no significant style is applied


# Determine the text to send (base text)
text_to_speak = base_text

# Generate style instructions based on sliders
style_instructions = create_style_instructions(
    masculine_feminine, assertiveness, buoyancy, confidence,
    enthusiasm, nasality, relaxedness, smoothness, tepidity,
    tightness, speed
)


print("--- Configuration ---")
print(f"OpenAI Voice: {openai_voice}")
print(f"OpenAI Model: {openai_model}")
print(f"Masculine/Feminine Slider: {masculine_feminine}")
print(f"Assertiveness Slider: {assertiveness}")
print(f"Buoyancy Slider: {buoyancy}")
print(f"Confidence Slider: {confidence}")
print(f"Enthusiasm Slider: {enthusiasm}")
print(f"Nasality Slider: {nasality}")
print(f"Relaxedness Slider: {relaxedness}")
print(f"Smoothness Slider: {smoothness}")
print(f"Tepidity Slider: {tepidity}")
print(f"Tightness Slider: {tightness}")
print(f"Speed Slider: {speed}")
print("-" * 20)
print(f"Base text sent to OpenAI: {text_to_speak}")
if style_instructions:
    print(f"Style Instructions sent to OpenAI: {style_instructions}")
else:
    print("No explicit style instructions generated.")
print("-" * 20)

# --- Indicate where the audio player will appear ---
print("Generating audio... Look below for the audio player.")

# --- Generate and Play ---
# Call the generate_speech_audio function with the selected text and optional instructions
audio_player = generate_speech_audio(
    text=text_to_speak,          # Pass the original text
    voice=openai_voice,
    model=openai_model,
    instructions=style_instructions # Pass the generated instructions
)

if audio_player:
  display(audio_player)
else:
  print("\nAudio generation failed. Check your API key and the define cell.")